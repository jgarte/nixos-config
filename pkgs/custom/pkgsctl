#!/usr/bin/env python
import os
import re
import subprocess
import datetime

from rofi import Rofi
from git import Repo

package_name_regexp = re.compile(
    r"(?:/nix/store/[0-9a-z]{32}-)"                 # prefix with hash - always present
    r"(?:python|perl|node_)?(?:[0-9\.\-]*)?"        # package subsets by languages (with version) - optional
    r"([0-9{1}A-Za-z\.\_\-]*)"                      # package name itself
)
package_version_start_regexp = re.compile(r"-v?[0-9]|-unstable|-with-packages|-with-plugins|-git")
current_system_regexp = re.compile(r"git\.([0-9abcdef]+)M?\$?")

nixpkgs_path = "/etc/nixos/pkgs/forges/github.com/NixOS/nixpkgs-channels/"
nixpkgs_branch = "nixos-unstable"
nixpkgs_fallback_branch = "nixos-unstable-working"
nixpkgs_upstream_remote = "upstream"

nixpkgs_proposed_path = "/etc/nixos/pkgs/forges/github.com/wiedzmin/nixpkgs/"
nixpkgs_proposed_branch = "master"


def get_installed_packages(home_manager=True,nixpkgs=True):
    installed_paths = []
    result = {}
    if nixpkgs:
        nixpkgs_list_task = subprocess.Popen("nix-store -q --references /run/current-system/sw | grep -v nixos",
                                         shell=True, stdout=subprocess.PIPE)
        nixpkgs_paths = nixpkgs_list_task.stdout.read().decode().split("\n")[:-1]
        assert nixpkgs_list_task.wait() == 0
        installed_paths.extend(nixpkgs_paths)
    if home_manager:
        home_manager_list_task = subprocess.Popen('nix-store -q --references "$(nix-store -q --references '
                                                  '/home/{0}/.nix-profile | grep home-manager-path)"'.format(
                                                      os.environ["USER"]), shell=True, stdout=subprocess.PIPE)
        home_manager_paths = home_manager_list_task.stdout.read().decode().split("\n")[:-1]
        assert home_manager_list_task.wait() == 0
        installed_paths.extend(home_manager_paths)
    for path in installed_paths:
        try:
            pn_match = package_name_regexp.search(path)
            package_name_postfix = pn_match.group(1)
            pvs_match = package_version_start_regexp.search(package_name_postfix)
            package_name = package_name_postfix[:pvs_match.span()[0]]
            result[package_name] = True
        except AttributeError:
            continue
    return [k for k in result]


def update_nixpkgs():
    branch = "nixos-unstable"
    fallback_branch = "nixos-unstable-working"

    current_system_path = os.readlink("/run/current-system")
    system_git_version = current_system_regexp.search(current_system_path).group(1)

    nixpkgs_repo = Repo(nixpkgs_path)
    nixpkgs_origin = nixpkgs_repo.remotes.origin
    local_head_ref = nixpkgs_repo.heads[nixpkgs_branch].object
    local_head = local_head_ref.hexsha
    remote_head = nixpkgs_origin.refs[nixpkgs_branch].object.hexsha
    try:
        fallback_head = nixpkgs_repo.heads[nixpkgs_fallback_branch].object.hexsha
    except IndexError:
        fallback_head = None

    should_rebase = local_head != remote_head
    should_rebuild = not local_head.startswith(system_git_version)
    should_force_fallback = not fallback_head or fallback_head and not fallback_head.startswith(system_git_version)

    fetch_results = list(nixpkgs_origin.fetch())
    if should_rebase:
        for fetch_info in nixpkgs_origin.fetch():
            print("Updated %s to %s" % (fetch_info.ref, fetch_info.commit))

    try:
        if should_rebase:
            while True:
                reply = str(input("Update local '{0}'? (y/n): ".format(nixpkgs_branch))).lower().strip()
                if reply[0] == 'y':
                    nixpkgs_repo.git.rebase("origin", nixpkgs_branch)
                    print("Updated '{0}': {1} --> {2}".format(nixpkgs_branch, local_head, remote_head))
                    head_ts = datetime.datetime.utcfromtimestamp(local_head_ref.authored_date).isoformat()
                    checkpoint = nixpkgs_repo.create_tag("v_{0}".format(local_head_ref.authored_date),
                                                         ref=local_head_ref,
                                                         message="checkpoint at {0}".format(head_ts))
                    break
                if reply[0] == 'n':
                    break
        if should_force_fallback:
            fallback_branch_ref = nixpkgs_repo.create_head(nixpkgs_fallback_branch,
                                                           commit=system_git_version,
                                                           force=True)
            last_working = nixpkgs_repo.create_tag("last_working", ref=system_git_version,
                                                   force=True,
                                                   message="last nixpkgs built and working")
            print("Updated '{0}': {1} --> {2}".format(nixpkgs_fallback_branch, fallback_head, system_git_version))
    except KeyboardInterrupt: # TODO: add types
        # TODO: rollback
        pass
    if should_rebuild:
        print("Nixpkgs updated, consider rebuilding!")


def update_nixpkgs_proposed():
    nixpkgs_proposed_repo = Repo(nixpkgs_proposed_path)
    nixpkgs_proposed_origin = nixpkgs_proposed_repo.remotes.origin

    # check if fetch remote present
    # if not present use rofi to input and add it


    # cd /etc/nixos/pkgs/nixpkgs-proposed
    # remote_fetch_meta=$(git remote -v | grep fetch)
    # has_upstream=$(echo $remote_fetch_meta | grep $upstream_remote_name)
    # if [ -z $has_upstream ]; then
    #     echo "No $upstream_remote_name remote found."
    #     echo "Use 'git remote add $upstream_remote_name <upstream url>' to add it."
    #     exit 1
    # fi
    # git fetch $upstream_remote_name
    # git merge $upstream_remote_name/$branch


def update_home_manager():
    # branch=master
    # branch_hash=$(git rev-parse --short $branch)
    # current_hm_hash=$(cat /etc/current-home-manager)

    # cd /etc/nixos/pkgs/home-manager
    # git tag -a -s --force last_working -m "last home-manager built and working" $current_hm_hash
    # git fetch origin
    # git rebase origin/$branch
    # branch_hash=$(git rev-parse --short $branch)
    # if [ "$branch_hash" != "$current_hm_hash" ]; then
    #     head_ts=$(git show -s --format=%ct HEAD)
    #     git tag -a -s --force "v_$head_ts" -m "checkpoint at $(LC_ALL=C date -d @$head_ts)"
    # fi
    # exit 0
    # ;;
    pass

def update_home_manager_proposed():
    # upstream_remote_name=upstream
    # branch=master

    # cd /etc/nixos/pkgs/home-manager-proposed
    # remote_fetch_meta=$(git remote -v | grep fetch)
    # has_upstream=$(echo $remote_fetch_meta | grep $upstream_remote_name)
    # if [ -z $has_upstream ]; then
    #     echo "No $upstream_remote_name remote found."
    #     echo "Use 'git remote add $upstream_remote_name <upstream url>' to add it."
    #     exit 1
    # fi
    # git fetch $upstream_remote_name
    # git merge $upstream_remote_name/$branch

    # exit 0
    # ;;
    pass

def list_installed_packages_updates():
    # TODO: remove duplication
    installed_packages = get_installed_packages()
    nixpkgs_repo = Repo(nixpkgs_path)
    local_head = nixpkgs_repo.heads[nixpkgs_branch].object.hexsha
    fallback_head = nixpkgs_repo.heads[nixpkgs_fallback_branch].object.hexsha
    git_log = nixpkgs_repo.git.log("--pretty=oneline","{0}...{1}".format(local_head, fallback_head))

    for entry in git_log.split("\n"):
        for package in installed_packages:
            if package in entry and not "Merge" in entry and not "init" in entry:
                print(entry)
                break


def list_new_packages():
    # TODO: remove duplication
    nixpkgs_repo = Repo(nixpkgs_path)
    local_head = nixpkgs_repo.heads[nixpkgs_branch].object.hexsha
    fallback_head = nixpkgs_repo.heads[nixpkgs_fallback_branch].object.hexsha
    git_log = nixpkgs_repo.git.log("--pretty=oneline","{0}...{1}".format(local_head, fallback_head))
    for entry in git_log.split("\n"):
        if "init" in entry and not "Merge" in entry:
            print(entry)


def review_home_manager_updates():
    # cd /etc/nixos/pkgs/home-manager
    # if [ "$branch_hash" = "$current_hm_hash" ]; then
    #     echo "No fresh updates, try again a bit later"
    #     exit 0
    # fi
    # echo "showing commits $branch_hash...$current_hm_hash"
    # git log --pretty=oneline $branch_hash...$current_hm_hash | grep -v Merge | fzf --reverse | xargs git show
    # exit 0
    # ;;
    pass

def show_nixpkgs_git_tags():
    # git tag | fzf --reverse | xargs git show
    # exit 0
    # ;;
    pass

def show_home_manager_git_tags():
    # cd /etc/nixos/pkgs/home-manager
    # git tag | fzf --reverse | xargs git show
    # exit 0
    # ;;
    pass


operations = [
    ["update nixpkgs", update_nixpkgs],
    ["update nixpkgs-proposed", update_nixpkgs_proposed],
    ["updates to installed packages", list_installed_packages_updates],
    ["new packages", list_new_packages],
    ["home-manager git tags", "huy"]
]


if __name__ == "__main__":
    r = Rofi()
    index, keypressed = r.select('perform:', [op[0] for op in operations])
    if keypressed == 0:
        operations[index[0]][1]()

# TODO: git submodule update --init (or some kind of versions pinning)
